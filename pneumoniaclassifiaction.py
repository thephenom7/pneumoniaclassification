# -*- coding: utf-8 -*-
"""pneumoniaclassifiaction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dBzJPV8jq0wJnS1WdfbMKlmg3bOIjUK2
"""

!mkdir .kaggle

import json

token={"username":"akshaylucof","key":"2ba90f5960ccb38c72cb2615892af210"}

with open('/content/.kaggle/kaggle.json', 'w') as file:
    json.dump(token, file)

!cp /content/.kaggle/kaggle.json ~/.kaggle/kaggle.json

!kaggle config set -n path -v{/content}

!chmod 600 /root/.kaggle/kaggle.json

!kaggle datasets download -d paultimothymooney/chest-xray-pneumonia

!unzip /content/{/content}/datasets/paultimothymooney/chest-xray-pneumonia/chest-xray-pneumonia.zip -d /content

import cv2
img=cv2.imread("/content/chest_xray/train/NORMAL/IM-0128-0001.jpeg")
print(img.shape)

from keras.applications.vgg16 import VGG16
img_rows, img_cols = 224, 224 
vgg = VGG16(weights='imagenet',include_top = False,input_shape = (img_rows, img_cols, 3))

for layer in vgg.layers:
    layer.trainable = False

def addTopModelvgg(bottom_model, num_classes):
    top_model = bottom_model.output
    top_model = GlobalAveragePooling2D()(top_model)
    top_model = Dense(1024,activation='relu')(top_model)
    top_model=Dropout(.3)(top_model)
    top_model = Dense(1024,activation='relu')(top_model)
    top_model=Dropout(.3)(top_model)
    top_model = Dense(512,activation='relu')(top_model)
    top_model=Dropout(.3)(top_model)
    top_model = Dense(256,activation='relu')(top_model)
    top_model = Dense(num_classes,activation='sigmoid')(top_model)
    return top_model

from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten, GlobalAveragePooling2D
from keras.layers import Conv2D, MaxPooling2D, ZeroPadding2D
from keras.layers.normalization import BatchNormalization
from keras.models import Model
num_classes = 1

FC_Head = addTopModelvgg(ResNet, num_classes)

model = Model(inputs = ResNet.input, outputs = FC_Head)

print(model.summary())

from keras.preprocessing.image import ImageDataGenerator

train_data_dir = '/content/chest_xray/chest_xray/train'
validation_data_dir = '/content/chest_xray/chest_xray/test'

# Let's use some data augmentaiton 
train_datagen = ImageDataGenerator(
      rescale=1./255,
      rotation_range=45,
      width_shift_range=0.3,
      height_shift_range=0.3,
      horizontal_flip=True,
      fill_mode='nearest')
 
validation_datagen = ImageDataGenerator(rescale=1./255)
 
# set our batch size (typically on most mid tier systems we'll use 16-32)
batch_size = 16
 
train_generator = train_datagen.flow_from_directory(
        train_data_dir,
        target_size=(img_rows, img_cols),
        batch_size=batch_size,
        class_mode='binary')
 
validation_generator = validation_datagen.flow_from_directory(
        validation_data_dir,
        target_size=(img_rows, img_cols),
        batch_size=batch_size,
        class_mode='binary')

from keras.optimizers import RMSprop
from keras.callbacks import ModelCheckpoint, EarlyStopping

                     
checkpoint = ModelCheckpoint("/content/pnemoniaclassify.h5",
                             monitor="val_loss",
                             mode="min",
                             save_best_only = True,
                             verbose=1)

earlystop = EarlyStopping(monitor = 'val_loss', 
                          min_delta = 0, 
                          patience = 3,
                          verbose = 1,
                          restore_best_weights = True)

callbacks = [earlystop, checkpoint]

model.compile(loss = 'binary_crossentropy',
              optimizer = RMSprop(lr = 0.001),
              metrics = ['accuracy'])

nb_train_samples = 5216
nb_validation_samples = 624

epochs = 12
batch_size = 16

history = model.fit_generator(
    train_generator,
    steps_per_epoch = nb_train_samples // batch_size,
    epochs = epochs,
    callbacks = callbacks,
    validation_data = validation_generator,
    validation_steps = nb_validation_samples // batch_size)

from keras.models import load_model

classifier = load_model('/content/pnemoniaclassify.h5')

import numpy as np
from google.colab.patches import cv2_imshow
from keras.preprocessing import image
test_image = image.load_img('/content/chest_xray/val/NORMAL/NORMAL2-IM-1427-0001.jpeg', target_size = (224, 224))
test_image = image.img_to_array(test_image)
test_image = np.expand_dims(test_image, axis = 0)
result = classifier.predict(test_image)
print(result[0][0])
if result[0][0] == 1:
    print('PNEUMONIA')
else:
    print('NORMAL')